#!/bin/bash

# Permission to allow storage access in Termux
termux-setup-storage

# Function to display a spinning loading animation
function loading_animation() {
    local duration=${1:-10} # Default duration: 10 seconds
    local chars=("‚†ã" "‚†ô" "‚†π" "‚†∏" "‚†º" "‚†¥" "‚†¶" "‚†ß" "‚†á" "‚†è")
    local num_chars=${#chars[@]}
    local interval=$((duration * 1000 / num_chars))

    for ((i = 0; i < num_chars; i++)); do
        echo -ne "\rDownloading the SMS script... ${chars[i]}"
        sleep 0.$interval
    done
}

# Function to display colorful ASCII art
function display_ascii_art() {
    echo -e "\e[1;33m"
    cat << "EOF"
  ____  _     _ _     _____ _     _     
 / ___|| |__ (_) |_  |  ___(_)___| |__  
 \___ \| '_ \| | __| | |_  | / __| '_ \ 
  ___) | | | | | |_  |  _| | \__ \ | | |
 |____/|_| |_|_|\__| |_|   |_|___/_| |_|
                                        
EOF
    echo -e "\e[0m"
}

# Display colorful ASCII art
display_ascii_art

# Update and upgrade Termux packages
echo "Updating package repositories..."
pkg update -y
echo "Upgrading installed packages..."
pkg upgrade -y

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to install packages using the package manager
install_package() {
  local package_name=$1
  if ! command_exists "$package_name"; then
    echo "Installing $package_name..."
    pkg install -y "$package_name"
  else
    echo "$package_name is already installed."
  fi
}

# Install necessary packages
install_package cronie
install_package termux-api
install_package whiptail

# Ensure directories exist
mkdir -p ~/.cache/crontab
mkdir -p ~/bin

# Download the main script with a spinning loading animation
echo "Downloading the SMS script..."
loading_animation & # Run the loading animation function in the background
pid=$!              # Get the process ID of the background task
curl -s -o ~/bin/sms https://raw.githubusercontent.com/Robertneed20k/auto-goodmorning/main/sms.sh >/dev/null 2>&1
kill $pid >/dev/null 2>&1 # Stop the loading animation once the download is complete
echo -e "\rDownloading the SMS script... Done"

# Make the script executable
echo "Making the script executable... done"
chmod +x ~/bin/sms

# Ensure ~/bin is in PATH
if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
  echo 'export PATH="$HOME/bin:$PATH"' >> ~/.bashrc
  export PATH="$HOME/bin:$PATH"
fi

# Add alias for 'sms' command in ~/.bashrc if not already defined
if ! grep -q "alias sms=" ~/.bashrc; then
  echo 'alias sms="$HOME/bin/sms"' >> ~/.bashrc
fi

# Source .bashrc to refresh the shell environment
source ~/.bashrc

# Final setup message
echo "Congratulations! The SMS sender has been successfully installed! üéâ"
echo "To start, simply type 'sms' in your terminal."
